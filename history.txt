visual studio .net 6 grpc template 으로 vtagSvc 추가
 - solution-project 를 같은 경로에
 - docker 지원

visual studio 용 .gitignore 를 /vtagSvc 에 추가

unity project vtagger 추가
 - 기본 3d core template

unity 용 .gitignore 를 /vtagger 에 추가

NuGetForUnity(https://github.com/GlitchEnzo/NuGetForUnity) 추가
 - Assets/3rdParty 경로 생성해 추가

nuget package 에서 어느 package 를 설치해야할지..

unity-package 를 이용하는 방법
 - https://github.com/alkee-allm/k2proto/blob/master/K2Unity/Assets/README.md
 - https://intl.cloud.tencent.com/document/product/1055/39057

혹은 native 가 없는 grpc-dotnet(https://github.com/grpc/grpc-dotnet)

grpc-dotnet 을 보니 Grpc.Net.* 을 NuGet 에서 받아 사용하면 될 것이라 생각
 - Grpc.Net.ClientFactory 설치(dependency 에 의해 나머지 설치)

오류들...
Assembly 'Assets/Packages/Microsoft.Extensions.Primitives.3.0.3/lib/netstandard2.0/Microsoft.Extensions.Primitives.dll' will not be loaded due to errors:
Unable to resolve reference 'System.Runtime.CompilerServices.Unsafe'. Is the assembly missing or incompatible with the current platform?
Reference validation can be disabled in the Plugin Inspector.

unity 를 다시시작하니 발생하지 않는다...


grpc 보다는 point cloud management/rendering 과 UI toolkit 을 이용한 UI 쪽에 우선 집중

reference
  * [PointPoint - alkee's private clould point testing platform](https://github.com/alkee/unitypointcloud)
  * [Point cloud rendering with Unity](https://bootcamp.uxdesign.cc/point-cloud-rendering-with-unity-1a07345eb27a)
  * 


요구사항정리부터 

## 요구사항

우선순위 순으로...

 * 로컬의 데이터를 서버에 쉽게 업로드 해 중앙에서 데이터 관리
   - 데이터 검색
   - 데이터/label import
   
 * point cloud labeling
   - 영역지정(cube, sphere, ...) => index 목록
   - scalar field 관리 및 rendering
   
 * 2D image labeling
   - dicom support (image, meta tags)
   - labels and tags for entire image
   - primitive region(point, circle, rectangle)
   - polygonal area
   - mask(segmentation) tools (livewire, magic wand...)
   
 * 업로드 없이 로컬의 데이터도 레이블 하고 사용할 수 있도록(local database?) 
 * 3D volume support..
 * platform independent ; 가능하면 native plugin 사용하지 않도록
 

정리..

## version 1

grpc service 로 파일 및 annotation 관리를 database 를 통해 하도록
  ; 파일시스템/공유폴더 방식을 그대로이용하는 경우 renaming, grouping(symbolic link), meta 정보가 불일치 하거나 잘못 사용할 수 있는 문제 방지
cli tool 을 통해 데이터(원격 파일) 관리.
python 에서 쉽게 파일 및 annotation 을 접근할 수 있는 package 제공
unity 를 이용해 point cloud annotation 기능 제공

동시에 실행이 필요한 project 들을 하나의 solution 에 넣을 경우(server + client) 동시실행 순서 등의 문제로 불편.

grpc 테스트를 위해 https://github.com/fullstorydev/grpcui 사용하고자 go 설치

```
C:\Users\alkee>grpcui -plaintext localhost:5162
Failed to compute set of methods to expose: server does not support the reflection API
```

protobuf reflection 을 지원하지 않아 API 목록을 별도로 얻어오지 못하는 모양. 따라서

`grpcui -plaintext -proto greet.proto -import-path "C:\work\git\vtag\vsproj\vtagSvc\Protos" localhost:5162`

와 같이 실행해 web interface 동작.

https://stackoverflow.com/a/70547123 를 reference 삼아 테스트해보았지만, OnConfiguring 함수는 어떤 경우에도 불리지 않는다.

매 호출마다 `builder.Services.AddDbContext<Database>` 함수의 option parameter, Database 의 생성자(`DbContextOptions<Database> options`)

그리고 서비스의 생성자 순으로 불린다.

[GrpcReflection 기능을 추가](https://martinbjorkstrom.com/posts/2020-07-08-grpc-reflection-in-net)하기위해

`Grpc.AspNetCore.Server.Reflection` package 를 추가하고 `builder.Services.AddGrpcReflection()`, `app.MapGrpcReflectionService()` 추가해

.proto 없이 테스트 환경 구성 https://docs.microsoft.com/en-us/aspnet/core/grpc/test-tools?view=aspnetcore-6.0

EFCore 는 migration 및 관리 장치가 너무 복잡해 microservice 에는 어울리지 않는 것 같다. sqlite-net 이 간단하고 간편해 어울리는 듯 하다.


대부분의 데이터(컨텐츠)들이 파일정보일 것이라 생각. sqlite 를 이용한 filesystem 을 아이디어로 파일 단위의 동작을 생각했으나...
 * https://www.codeproject.com/Articles/336112/Simple-file-system-over-SQLite
 * https://github.com/guardianproject/libsqlfs
 
dbms 를 사용하는 메리트가 크지 않는것도 같다. 파일 일부를 읽고쓰는등의 복잡한 파일시스템이 필요한것도 아니므로..

일단 server-client 보다 3d 와 local file system 을 사용하는 unity project 에 집중하는게....








